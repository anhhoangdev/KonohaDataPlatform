#!/bin/bash

# Generate terraform.tfvars from environment variables
# This script reads from config.env and generates terraform.tfvars

set -e

# Load configuration
if [[ -f "config.env" ]]; then
    source config.env
else
    echo "Error: config.env not found"
    echo "Please copy config.env.example to config.env and customize it"
    exit 1
fi

# Create terraform directory if it doesn't exist
mkdir -p terraform

# Generate terraform.tfvars
cat > terraform/terraform.tfvars << EOF
# Auto-generated terraform.tfvars from config.env
# Do not edit this file directly - edit config.env instead

# Vault Configuration
vault_dev_mode   = ${VAULT_DEV_MODE:-true}
vault_token      = "${VAULT_ROOT_TOKEN:-root}"
vault_namespace  = "${VAULT_NAMESPACE:-vault-system}"

# Kubernetes Namespaces
kyuubi_namespace = "${KYUUBI_NAMESPACE:-kyuubi}"

# Vault Secrets Operator
enable_vault_secrets_operator = true

# Vault Secrets Configuration
create_vault_secrets = true
kyuubi_secrets = {
  # 🗄️ MinIO S3-compatible storage credentials
  minio = {
    path = "kyuubi/minio"
    data = {
      access_key = "${MINIO_ACCESS_KEY:-minioadmin}"
      secret_key = "${MINIO_SECRET_KEY:-minioadmin123}"
      endpoint   = "${MINIO_ENDPOINT:-http://minio:9000}"
    }
  }

  # 🗄️ MariaDB credentials for Hive Metastore
  database = {
    path = "kyuubi/database"
    data = {
      host     = "mariadb"
      port     = "3306"
      database = "${MARIADB_DATABASE:-hive_metastore}"
      username = "${MARIADB_USER:-hive}"
      password = "${MARIADB_PASSWORD:-hivepassword}"
      root_password = "${MARIADB_ROOT_PASSWORD:-rootpassword}"
      # Add MariaDB-specific keys that match deployment expectations
      mariadb_host = "mariadb"
      mariadb_port = "3306"
      mariadb_database = "${MARIADB_DATABASE:-hive_metastore}"
      mariadb_user = "${MARIADB_USER:-hive}"
      mariadb_password = "${MARIADB_PASSWORD:-hivepassword}"
      mariadb_root_password = "${MARIADB_ROOT_PASSWORD:-rootpassword}"
    }
  }

  # 🔥 Spark configuration for Kyuubi engines
  spark = {
    path = "kyuubi/spark"
    data = {
      driver_memory    = "${SPARK_DRIVER_MEMORY:-2g}"
      executor_memory  = "${SPARK_EXECUTOR_MEMORY:-2g}"
      executor_cores   = "${SPARK_EXECUTOR_CORES:-2}"
      sql_warehouse_dir = "${SPARK_SQL_WAREHOUSE_DIR:-s3a://warehouse/}"
      # Add missing keys that Kyuubi deployments expect
      spark_driver_memory = "${SPARK_DRIVER_MEMORY:-2g}"
      spark_executor_memory = "${SPARK_EXECUTOR_MEMORY:-2g}"
      spark_executor_cores = "${SPARK_EXECUTOR_CORES:-2}"
      spark_max_executors = "${SPARK_MAX_EXECUTORS:-9}"
      spark_sql_adaptive_enabled = "${SPARK_SQL_ADAPTIVE_ENABLED:-true}"
      spark_sql_adaptive_coalescePartitions_enabled = "${SPARK_SQL_ADAPTIVE_COALESCE_PARTITIONS_ENABLED:-true}"
    }
  }

  # 🛠️ Kyuubi server configuration
  kyuubi_server = {
    path = "kyuubi/server"
    data = {
      bind_host           = "${KYUUBI_BIND_HOST:-0.0.0.0}"
      bind_port           = "${KYUUBI_BIND_PORT:-10009}"
      frontend_bind_port  = "${KYUUBI_FRONTEND_BIND_PORT:-10099}"
    }
  }

  # ☁️ Airflow credentials (webserver/scheduler) and backend Postgres
  airflow = {
    path = "kyuubi/airflow"
    data = {
      postgres_db       = "${AIRFLOW_POSTGRES_DB:-airflow}"
      postgres_user     = "${AIRFLOW_POSTGRES_USER:-airflow}"
      postgres_password = "${AIRFLOW_POSTGRES_PASSWORD:-airflow123}"
      postgres_host     = "${AIRFLOW_POSTGRES_HOST:-airflow-postgresql}"
      postgres_port     = "${AIRFLOW_POSTGRES_PORT:-5432}"
      sql_alchemy_conn  = "postgresql+psycopg2://${AIRFLOW_POSTGRES_USER:-airflow}:${AIRFLOW_POSTGRES_PASSWORD:-airflow123}@${AIRFLOW_POSTGRES_HOST:-airflow-postgresql}:${AIRFLOW_POSTGRES_PORT:-5432}/${AIRFLOW_POSTGRES_DB:-airflow}"
      fernet_key        = "${AIRFLOW_FERNET_KEY:-YlCImzjge_TeZc7jGvKjg8nqxCjFpZDOWl5bpFtXlDA=}"
    }
  }

  # 📈 Grafana admin credentials
  grafana = {
    path = "kyuubi/grafana"
    data = {
      username = "${GRAFANA_ADMIN_USER:-admin}"
      password = "${GRAFANA_ADMIN_PASSWORD:-admin123}"
    }
  }
}

# FluxCD GitOps Configuration
enable_fluxcd = true
git_repository_url = "${GIT_REPOSITORY_URL:-https://github.com/anhhoangdev/LocalDataPlatform}"
git_branch = "${GIT_BRANCH:-main}"
enable_image_automation = false

# Git Authentication (optional - for private repositories)
EOF

# Add git authentication if provided
if [[ -n "${GIT_USERNAME}" && -n "${GIT_PASSWORD}" ]]; then
    cat >> terraform/terraform.tfvars << EOF
git_auth_secret = "git-auth"
git_username = "${GIT_USERNAME}"
git_password = "${GIT_PASSWORD}"
EOF
else
    cat >> terraform/terraform.tfvars << EOF
# git_auth_secret = "git-auth"
# git_username = "your-username"
# git_password = "ghp_your_github_token"
EOF
fi

# Add ingress configuration
cat >> terraform/terraform.tfvars << EOF

# Ingress Configuration
enable_ingress = true
enable_vault_ingress = true
enable_kyuubi_ingress = true
vault_ingress_host = "${VAULT_INGRESS_HOST:-vault.local}"
kyuubi_ingress_host = "${KYUUBI_INGRESS_HOST:-kyuubi.local}"

# TLS Configuration (optional)
enable_tls = ${ENABLE_TLS:-false}
enable_cert_manager = ${ENABLE_CERT_MANAGER:-false}
create_self_signed_issuer = true
EOF

# Add letsencrypt email if provided
if [[ -n "${LETSENCRYPT_EMAIL}" ]]; then
    echo "letsencrypt_email = \"${LETSENCRYPT_EMAIL}\"" >> terraform/terraform.tfvars
else
    echo "# letsencrypt_email = \"your-email@example.com\"" >> terraform/terraform.tfvars
fi

# Add monitoring configuration
cat >> terraform/terraform.tfvars << EOF

# Monitoring
enable_monitoring = ${ENABLE_MONITORING:-false}
EOF

echo "✅ Generated terraform/terraform.tfvars from config.env"
echo "📝 Review the generated file before running terraform commands" 